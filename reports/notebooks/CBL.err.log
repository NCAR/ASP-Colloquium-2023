Traceback (most recent call last):
  File "/Users/rneale/miniconda3/envs/jbooks/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/rneale/miniconda3/envs/jbooks/lib/python3.9/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/rneale/miniconda3/envs/jbooks/lib/python3.9/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/rneale/miniconda3/envs/jbooks/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/Users/rneale/miniconda3/envs/jbooks/lib/python3.9/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/rneale/miniconda3/envs/jbooks/lib/python3.9/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/rneale/miniconda3/envs/jbooks/lib/python3.9/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------

for f in sounding_filenames:
    print(f)
    # file = open(sounding_directory+f,"r")
    # file.close
    
    col_names = ['Time','hh','mm','ss','pressure','temperature','dewpoint','RH','u','v','speed','direction','dz', 'GeoPoAlt','test'
                 'longitude','latitude','height']

    df = pd.read_fwf(sounding_directory+f, nrows = 2000, #nrows=2000,
                 skiprows=15, usecols=[4,5,6,7,8,9,10,11,14,15,16], names=col_names) 
    
    # The XPIA/CABL soundings have missing data flags that we'll replace with NaN
    df['pressure'].replace(-999.0, np.nan,inplace=True)
    df['temperature'].replace(-999.0, np.nan,inplace=True)
    df['dewpoint'].replace(-999.0, np.nan,inplace=True)
    df['RH'].replace(-999.0, np.nan,inplace=True)
    df['height'].replace(-999.0, np.nan,inplace=True)
    df['u'].replace(-999.0, np.nan,inplace=True)
    df['v'].replace(-999.0, np.nan,inplace=True)
    df['speed'].replace(-999.0, np.nan,inplace=True)
    df['direction'].replace(-999.0, np.nan,inplace=True)
    df['direction'].replace(999.0, np.nan,inplace=True)
    
    # Get rid of the lines with NaNs to make the plots pretty
    df = df.dropna(subset=('pressure','height','temperature', 'RH', 'dewpoint', 'direction', 'speed'), how='any').reset_index(drop=True)

    T = df['temperature'].values * units.degC
    z = df['height'].values * units.m
    p = df['pressure'].values * units.hPa
    Td = df['dewpoint'].values * units.degC
    wind_speed = df['speed'].values * units.mps
    wind_dir = df['direction'].values * units.degrees
    u = df['u'].values * units.mps
    v = df['v'].values * units.mps
    
    theta = mpcalc.potential_temperature(p, T)   # This metpy routine calculates theta and gives it units of Kelvin
    RH = mpcalc.relative_humidity_from_dewpoint(T, Td)  # This metpy routine calculates relative humidity
    mixing_ratio = mpcalc.mixing_ratio_from_relative_humidity(p, T, RH) # This metpy routine calculates mixing ratio
    theta_v=mpcalc.virtual_potential_temperature(p, T, mixing_ratio) # metpy to calculate theta_V
    
    # Open a new figure

    height_range = [1500,5000] # units of meters - may need to adjust

    fig = plt.figure(figsize=(12,5))

    # Left plot
    ax1 = fig.add_subplot(1,3,1)
    ax1.set_ylim(height_range)

    # Center plot
    ax2 = fig.add_subplot(1,3,2)
    ax2.set_ylim(height_range)
    
    # Right plot
    ax3 = fig.add_subplot(1,3,3)
    ax3.set_ylim(height_range)

    # Theta and Theta_v profiles
    im1 = ax1.plot(theta, z, label="\u03B8")
    im1 = ax1.plot(theta_v, z, label="\u03B8$_v$")
    ax1.legend(fontsize=14)
    ax1.set_xlim([295,310])  ### May need to change this temperature range
    ax1.set_xlabel("Potential Temperature [K]", fontsize=14)
    ax1.set_ylabel("[meters above sea level]", fontsize=14)

    # Wind Speed profile
    im2 = ax2.plot(wind_speed, z)
    ax2.set_title("", fontsize=14)
    ax2.set_xlabel("Wind Speed [m s$^{-1}$]", fontsize=14)
    ax2.set_xlim([0,20])
    ax2.set_ylabel(" ", fontsize=14)
    ax2.set_title(f, fontsize=14)

    # Wind Direction profile
    im3 = ax3.plot(wind_dir, z)
    ax3.set_title("", fontsize=14)
    ax3.set_xlabel("Wind Direction [deg]", fontsize=14)
    ax3.set_xlim([0,360])
    ax3.set_ylabel(" ", fontsize=14)

    # Save figure as a pdf - could also just use screen capture to incorporate into Word or ppt
    # plt.savefig(f+".pdf")

    # Show the plot
    plt.show()
------------------

----- stdout -----
D20150313_140002_PQC.eol
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mFileNotFoundError[0m                         Traceback (most recent call last)
[0;32m/var/folders/zv/s69n95bx5k93wbmz4n6fr5dc0000gp/T/ipykernel_21826/539403927.py[0m in [0;36m<module>[0;34m[0m
[1;32m      8[0m [0;34m[0m[0m
[1;32m      9[0m     df = pd.read_fwf(sounding_directory+f, nrows = 2000, #nrows=2000,
[0;32m---> 10[0;31m                  skiprows=15, usecols=[4,5,6,7,8,9,10,11,14,15,16], names=col_names) 
[0m[1;32m     11[0m [0;34m[0m[0m
[1;32m     12[0m     [0;31m# The XPIA/CABL soundings have missing data flags that we'll replace with NaN[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/neale_myenv/lib/python3.7/site-packages/pandas/io/parsers/readers.py[0m in [0;36mread_fwf[0;34m(filepath_or_buffer, colspecs, widths, infer_nrows, **kwds)[0m
[1;32m    760[0m     [0mkwds[0m[0;34m[[0m[0;34m"infer_nrows"[0m[0;34m][0m [0;34m=[0m [0minfer_nrows[0m[0;34m[0m[0;34m[0m[0m
[1;32m    761[0m     [0mkwds[0m[0;34m[[0m[0;34m"engine"[0m[0;34m][0m [0;34m=[0m [0;34m"python-fwf"[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 762[0;31m     [0;32mreturn[0m [0m_read[0m[0;34m([0m[0mfilepath_or_buffer[0m[0;34m,[0m [0mkwds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    763[0m [0;34m[0m[0m
[1;32m    764[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/neale_myenv/lib/python3.7/site-packages/pandas/io/parsers/readers.py[0m in [0;36m_read[0;34m(filepath_or_buffer, kwds)[0m
[1;32m    480[0m [0;34m[0m[0m
[1;32m    481[0m     [0;31m# Create the parser.[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 482[0;31m     [0mparser[0m [0;34m=[0m [0mTextFileReader[0m[0;34m([0m[0mfilepath_or_buffer[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    483[0m [0;34m[0m[0m
[1;32m    484[0m     [0;32mif[0m [0mchunksize[0m [0;32mor[0m [0miterator[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/neale_myenv/lib/python3.7/site-packages/pandas/io/parsers/readers.py[0m in [0;36m__init__[0;34m(self, f, engine, **kwds)[0m
[1;32m    809[0m             [0mself[0m[0;34m.[0m[0moptions[0m[0;34m[[0m[0;34m"has_index_names"[0m[0;34m][0m [0;34m=[0m [0mkwds[0m[0;34m[[0m[0;34m"has_index_names"[0m[0;34m][0m[0;34m[0m[0;34m[0m[0m
[1;32m    810[0m [0;34m[0m[0m
[0;32m--> 811[0;31m         [0mself[0m[0;34m.[0m[0m_engine[0m [0;34m=[0m [0mself[0m[0;34m.[0m[0m_make_engine[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mengine[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    812[0m [0;34m[0m[0m
[1;32m    813[0m     [0;32mdef[0m [0mclose[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/neale_myenv/lib/python3.7/site-packages/pandas/io/parsers/readers.py[0m in [0;36m_make_engine[0;34m(self, engine)[0m
[1;32m   1038[0m             )
[1;32m   1039[0m         [0;31m# error: Too many arguments for "ParserBase"[0m[0;34m[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1040[0;31m         [0;32mreturn[0m [0mmapping[0m[0;34m[[0m[0mengine[0m[0;34m][0m[0;34m([0m[0mself[0m[0;34m.[0m[0mf[0m[0;34m,[0m [0;34m**[0m[0mself[0m[0;34m.[0m[0moptions[0m[0;34m)[0m  [0;31m# type: ignore[call-arg][0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1041[0m [0;34m[0m[0m
[1;32m   1042[0m     [0;32mdef[0m [0m_failover_to_python[0m[0;34m([0m[0mself[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/neale_myenv/lib/python3.7/site-packages/pandas/io/parsers/python_parser.py[0m in [0;36m__init__[0;34m(self, f, **kwds)[0m
[1;32m   1201[0m         [0mself[0m[0;34m.[0m[0mcolspecs[0m [0;34m=[0m [0mkwds[0m[0;34m.[0m[0mpop[0m[0;34m([0m[0;34m"colspecs"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m   1202[0m         [0mself[0m[0;34m.[0m[0minfer_nrows[0m [0;34m=[0m [0mkwds[0m[0;34m.[0m[0mpop[0m[0;34m([0m[0;34m"infer_nrows"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0;32m-> 1203[0;31m         [0mPythonParser[0m[0;34m.[0m[0m__init__[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mf[0m[0;34m,[0m [0;34m**[0m[0mkwds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m   1204[0m [0;34m[0m[0m
[1;32m   1205[0m     [0;32mdef[0m [0m_make_reader[0m[0;34m([0m[0mself[0m[0;34m,[0m [0mf[0m[0;34m)[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/neale_myenv/lib/python3.7/site-packages/pandas/io/parsers/python_parser.py[0m in [0;36m__init__[0;34m(self, f, **kwds)[0m
[1;32m     94[0m             [0mself[0m[0;34m.[0m[0mdata[0m [0;34m=[0m [0mcast[0m[0;34m([0m[0mIterator[0m[0;34m[[0m[0mstr[0m[0;34m][0m[0;34m,[0m [0mf[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[1;32m     95[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m
[0;32m---> 96[0;31m             [0mself[0m[0;34m.[0m[0m_open_handles[0m[0;34m([0m[0mf[0m[0;34m,[0m [0mkwds[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m     97[0m             [0;32massert[0m [0mself[0m[0;34m.[0m[0mhandles[0m [0;32mis[0m [0;32mnot[0m [0;32mNone[0m[0;34m[0m[0;34m[0m[0m
[1;32m     98[0m             [0;32massert[0m [0mhasattr[0m[0;34m([0m[0mself[0m[0;34m.[0m[0mhandles[0m[0;34m.[0m[0mhandle[0m[0;34m,[0m [0;34m"readline"[0m[0;34m)[0m[0;34m[0m[0;34m[0m[0m

[0;32m~/miniconda3/envs/neale_myenv/lib/python3.7/site-packages/pandas/io/parsers/base_parser.py[0m in [0;36m_open_handles[0;34m(self, src, kwds)[0m
[1;32m    227[0m             [0mmemory_map[0m[0;34m=[0m[0mkwds[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m"memory_map"[0m[0;34m,[0m [0;32mFalse[0m[0;34m)[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    228[0m             [0mstorage_options[0m[0;34m=[0m[0mkwds[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m"storage_options"[0m[0;34m,[0m [0;32mNone[0m[0;34m)[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 229[0;31m             [0merrors[0m[0;34m=[0m[0mkwds[0m[0;34m.[0m[0mget[0m[0;34m([0m[0;34m"encoding_errors"[0m[0;34m,[0m [0;34m"strict"[0m[0;34m)[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    230[0m         )
[1;32m    231[0m [0;34m[0m[0m

[0;32m~/miniconda3/envs/neale_myenv/lib/python3.7/site-packages/pandas/io/common.py[0m in [0;36mget_handle[0;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[1;32m    704[0m                 [0mencoding[0m[0;34m=[0m[0mioargs[0m[0;34m.[0m[0mencoding[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[1;32m    705[0m                 [0merrors[0m[0;34m=[0m[0merrors[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0;32m--> 706[0;31m                 [0mnewline[0m[0;34m=[0m[0;34m""[0m[0;34m,[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m    707[0m             )
[1;32m    708[0m         [0;32melse[0m[0;34m:[0m[0;34m[0m[0;34m[0m[0m

[0;31mFileNotFoundError[0m: [Errno 2] No such file or directory: '/glade/work/rneale/ASP2023/obs/04_bl_scaling/D20150313_140002_PQC.eol'

